version: '3.8'

# Recall Microservices Development Environment
# Complete development setup for all services

services:
  # API Gateway (Kong)
  api-gateway:
    image: kong:3.4-alpine
    ports:
      - "8000:8000"   # API Gateway
      - "8001:8001"   # Admin API
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    volumes:
      - ./gateway/kong.yml:/kong/declarative/kong.yml
    networks:
      - recall-network
    restart: unless-stopped
    depends_on:
      - memory-storage
      - vector-embedding
      - search-query

  # Memory Storage Service
  memory-storage:
    build: ./services/memory-storage
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=recall
      - POSTGRES_USER=recall_user
      - POSTGRES_PASSWORD=recall_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - PORT=3000
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/memory-storage/src:/app/src
      - ./services/memory-storage/server.js:/app/server.js
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vector Embedding Service
  vector-embedding:
    build: ./services/vector-embedding
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=text-embedding-3-small
      - OPENAI_DIMENSIONS=1536
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - PORT=3001
    depends_on:
      - redis
    volumes:
      - ./services/vector-embedding/src:/app/src
      - ./services/vector-embedding/server.js:/app/server.js
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Search Query Service
  search-query:
    build: ./services/search-query
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - PORT=3002
    depends_on:
      - elasticsearch
      - redis
    volumes:
      - ./services/search-query/src:/app/src
      - ./services/search-query/server.js:/app/server.js
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Memory Graph Service
  memory-graph:
    build: ./services/memory-graph
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=recall_password
      - PORT=3003
    depends_on:
      - neo4j
    volumes:
      - ./services/memory-graph/src:/app/src
      - ./services/memory-graph/server.js:/app/server.js
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Real-time Sync Service
  realtime-sync:
    build: ./services/realtime-sync
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - PORT=3004
    depends_on:
      - redis
      - rabbitmq
    volumes:
      - ./services/realtime-sync/src:/app/src
      - ./services/realtime-sync/server.js:/app/server.js
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Analytics & Metrics Service
  analytics:
    build: ./services/analytics
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - CLICKHOUSE_URL=http://clickhouse:8123
      - PORT=3005
    depends_on:
      - prometheus
      - grafana
      - clickhouse
    volumes:
      - ./services/analytics/src:/app/src
      - ./services/analytics/server.js:/app/server.js
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Infrastructure Services

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=recall
      - POSTGRES_USER=recall_user
      - POSTGRES_PASSWORD=recall_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/memory-storage/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recall_user -d recall"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    environment:
      - NEO4J_AUTH=neo4j/recall_password
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "recall_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - recall-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - recall-network
    restart: unless-stopped

  # ClickHouse Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./monitoring/clickhouse/config.xml:/etc/clickhouse-server/config.xml
    networks:
      - recall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Admin UIs

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@recall.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - recall-network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - recall-network
    restart: unless-stopped

  # Elasticsearch Head
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    ports:
      - "9100:9100"
    depends_on:
      - elasticsearch
    networks:
      - recall-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  clickhouse_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  recall-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16