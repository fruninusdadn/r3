# Agent Orchestration Configuration
# Defines how multiple Claude agents work in parallel on Recall microservices

metadata:
  project: recall
  version: "2.0.0"
  orchestration_model: parallel_microservices
  total_agents: 48
  coordination_method: event_driven

# Agent Teams Configuration
agent_teams:
  # Core Memory Services Team
  storage_team:
    service: memory-storage
    repository: github.com/recall/memory-storage
    agents:
      - id: storage-db-specialist
        role: Database Implementation
        skills: [postgresql, migrations, indexing]
        tasks:
          - Design PostgreSQL schema
          - Implement connection pooling
          - Create migration scripts
          - Optimize queries

      - id: storage-cache-specialist
        role: Caching Layer
        skills: [redis, memcached, caching-strategies]
        tasks:
          - Implement Redis caching
          - Design cache invalidation
          - Create cache warming
          - Monitor cache performance

      - id: storage-api-specialist
        role: API Development
        skills: [rest, graphql, openapi]
        tasks:
          - Design REST endpoints
          - Implement CRUD operations
          - Create OpenAPI spec
          - Build GraphQL resolvers

      - id: storage-test-specialist
        role: Testing & Quality
        skills: [jest, integration-testing, load-testing]
        tasks:
          - Unit test coverage
          - Integration tests
          - Load testing
          - Contract testing

  # Vector Embedding Team
  embedding_team:
    service: vector-embedding
    repository: github.com/recall/vector-embedding
    agents:
      - id: embedding-ml-specialist
        role: ML Engineering
        skills: [pytorch, transformers, embeddings]
        tasks:
          - Integrate OpenAI API
          - Implement Sentence-Transformers
          - Optimize embedding generation
          - Model versioning

      - id: embedding-infra-specialist
        role: Infrastructure
        skills: [gpu, kubernetes, scaling]
        tasks:
          - GPU cluster setup
          - Auto-scaling configuration
          - Resource optimization
          - Model serving

      - id: embedding-search-specialist
        role: Vector Search
        skills: [faiss, annoy, hnsw]
        tasks:
          - FAISS index implementation
          - Similarity search optimization
          - Index management
          - Search benchmarking

      - id: embedding-test-specialist
        role: Testing
        skills: [pytest, ml-testing, benchmarking]
        tasks:
          - Embedding quality tests
          - Performance benchmarks
          - API testing
          - Load testing

  # Search Service Team
  search_team:
    service: search-query
    repository: github.com/recall/search-query
    agents:
      - id: search-elastic-specialist
        role: Elasticsearch
        skills: [elasticsearch, lucene, indexing]
        tasks:
          - Elasticsearch setup
          - Index mapping design
          - Query DSL implementation
          - Performance tuning

      - id: search-ranking-specialist
        role: Ranking & Relevance
        skills: [ml-ranking, bm25, learning-to-rank]
        tasks:
          - Ranking algorithm implementation
          - Relevance tuning
          - A/B testing framework
          - Personalization

      - id: search-api-specialist
        role: API Development
        skills: [graphql, rest, query-parsing]
        tasks:
          - GraphQL schema design
          - Query parser implementation
          - API gateway integration
          - Response formatting

      - id: search-test-specialist
        role: Testing
        skills: [search-quality, relevance-testing, load-testing]
        tasks:
          - Search quality metrics
          - Relevance testing
          - Performance testing
          - User acceptance testing

  # Graph Service Team
  graph_team:
    service: memory-graph
    repository: github.com/recall/memory-graph
    agents:
      - id: graph-db-specialist
        role: Graph Database
        skills: [neo4j, cypher, graph-modeling]
        tasks:
          - Neo4j schema design
          - Cypher query optimization
          - Graph import/export
          - Backup strategies

      - id: graph-algo-specialist
        role: Graph Algorithms
        skills: [networkx, graph-algorithms, ml-graphs]
        tasks:
          - PageRank implementation
          - Community detection
          - Path finding algorithms
          - Graph embeddings

      - id: graph-viz-specialist
        role: Visualization
        skills: [d3js, cytoscape, graph-visualization]
        tasks:
          - Visualization API
          - Interactive graph UI
          - Layout algorithms
          - Performance optimization

      - id: graph-test-specialist
        role: Testing
        skills: [graph-testing, performance-testing]
        tasks:
          - Graph integrity tests
          - Algorithm correctness
          - Performance benchmarks
          - API testing

  # Real-time Sync Team
  realtime_team:
    service: realtime-sync
    repository: github.com/recall/realtime-sync
    agents:
      - id: realtime-websocket-specialist
        role: WebSocket Implementation
        skills: [websockets, socket.io, connection-management]
        tasks:
          - WebSocket server setup
          - Connection pooling
          - Heartbeat implementation
          - Reconnection logic

      - id: realtime-messaging-specialist
        role: Message Queue
        skills: [rabbitmq, kafka, event-streaming]
        tasks:
          - RabbitMQ integration
          - Event routing
          - Message persistence
          - Dead letter handling

      - id: realtime-subscription-specialist
        role: Subscription Management
        skills: [pub-sub, event-sourcing, cqrs]
        tasks:
          - Subscription system
          - Event filtering
          - User preferences
          - Notification routing

      - id: realtime-test-specialist
        role: Testing
        skills: [websocket-testing, load-testing, chaos-engineering]
        tasks:
          - Connection testing
          - Message delivery tests
          - Failover testing
          - Load testing

# Coordination Protocols
coordination:
  communication:
    primary: slack
    channels:
      - name: recall-general
        purpose: Cross-team coordination
      - name: recall-architecture
        purpose: Architecture decisions
      - name: recall-integration
        purpose: Integration issues
      - name: recall-standup
        purpose: Daily standups

  meetings:
    daily_standup:
      time: "09:00 UTC"
      duration: 15
      format: async_slack_thread

    weekly_sync:
      time: "Monday 14:00 UTC"
      duration: 60
      format: video_call

    architecture_review:
      time: "Friday 15:00 UTC"
      duration: 90
      format: design_review

  integration_points:
    - name: API Contract Review
      frequency: per_pr
      participants: [api_specialists]

    - name: Event Schema Review
      frequency: weekly
      participants: [all_teams]

    - name: Performance Review
      frequency: bi_weekly
      participants: [test_specialists]

# Parallel Execution Plan
execution_plan:
  week_1:
    parallel_tracks:
      - track: A
        teams: [storage_team]
        deliverables:
          - Database schema
          - Basic CRUD API
          - Redis setup
          - Unit tests

      - track: B
        teams: [embedding_team]
        deliverables:
          - OpenAI integration
          - Embedding API
          - FAISS setup
          - Benchmarks

      - track: C
        teams: [search_team]
        deliverables:
          - Elasticsearch setup
          - Basic search API
          - Index mapping
          - Search tests

      - track: D
        teams: [graph_team]
        deliverables:
          - Neo4j setup
          - Graph schema
          - Basic traversal
          - Graph tests

  week_2:
    parallel_tracks:
      - track: E
        teams: [storage_team, embedding_team]
        integration: Storage-Embedding pipeline
        deliverables:
          - Integrated embedding storage
          - Batch processing
          - Performance optimization

      - track: F
        teams: [search_team, graph_team]
        integration: Graph-enhanced search
        deliverables:
          - Graph-based ranking
          - Relationship search
          - Combined API

  week_3:
    parallel_tracks:
      - track: G
        teams: [all_teams]
        integration: Full system integration
        deliverables:
          - End-to-end workflows
          - Integration tests
          - Performance benchmarks
          - Documentation

# Success Criteria
success_metrics:
  code_quality:
    coverage: 80%
    linting: pass
    security_scan: pass

  performance:
    api_latency_p99: 100ms
    throughput: 10000_rps
    error_rate: <0.1%

  delivery:
    on_time_delivery: 95%
    integration_success: 100%
    documentation_complete: 100%

# Agent Tooling
agent_tools:
  development:
    - name: Claude Code
      purpose: Primary development
      config:
        model: opus-4
        context_window: 200k

    - name: GitHub Copilot
      purpose: Code completion

    - name: Cursor
      purpose: IDE integration

  testing:
    - name: Jest/Pytest
      purpose: Unit testing

    - name: K6
      purpose: Load testing

    - name: Postman
      purpose: API testing

  deployment:
    - name: Docker
      purpose: Containerization

    - name: Kubernetes
      purpose: Orchestration

    - name: ArgoCD
      purpose: GitOps deployment

# Risk Management
risks:
  - risk: Integration failures
    mitigation: Contract testing, staging environment
    owner: integration_team

  - risk: Performance degradation
    mitigation: Continuous benchmarking, auto-scaling
    owner: test_specialists

  - risk: Agent coordination issues
    mitigation: Clear ownership, automated workflows
    owner: project_manager

# Escalation Path
escalation:
  level_1:
    trigger: Blocked for >2 hours
    action: Notify team lead

  level_2:
    trigger: Blocked for >4 hours
    action: Cross-team assistance

  level_3:
    trigger: Blocked for >8 hours
    action: Architecture team intervention

  level_4:
    trigger: Critical production issue
    action: All-hands response

# Monitoring & Observability
monitoring:
  dashboards:
    - name: Agent Activity
      metrics: [commits_per_day, pr_velocity, test_coverage]

    - name: Service Health
      metrics: [uptime, latency, error_rate]

    - name: Integration Status
      metrics: [api_compatibility, event_flow, data_consistency]

  alerts:
    - name: Service Down
      condition: uptime < 99.9%
      severity: critical

    - name: Performance Degradation
      condition: p99_latency > 200ms
      severity: warning

    - name: Integration Failure
      condition: error_rate > 1%
      severity: critical